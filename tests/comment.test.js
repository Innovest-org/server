const { MongoClient } = require('mongodb');
const mongoose = require('mongoose');
const Comment = require('../db/models/commentModel'); // Assuming your comment schema is here
require('dotenv').config();

describe('Comment Collection Insert Test', () => {
  let connection;
  let db;
  let client;

  beforeAll(async () => {
    // MongoDB native connection using your database "Innovest" on localhost
    const uri = 'mongodb://localhost:27017'; // Local URI
    client = await MongoClient.connect(uri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    db = await client.db('Innovest'); // Connect to the "Innovest" database

    // Mongoose connection to the same URI and database
    await mongoose.connect(uri + '/Innovest', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
  });

  afterAll(async () => {
    if (client) {
      await client.close(); // Close MongoClient connection
    }
    if (mongoose.connection) {
      await mongoose.connection.close(); // Close Mongoose connection
    }
  });

  // Clear the 'comments' collection before each test
  beforeEach(async () => {
    await db.collection('comments').deleteMany({});  // Clear existing documents
  });

  // Test case to insert a document into the 'comments' collection
  it('should insert a doc into comments collection', async () => {
    const comments = db.collection('comments');

    const mockComment = {
      comment_id: 'some-uuid',  // In practice, this would be generated by uuidv4()
      content: 'This is a test comment',
      created_at: new Date(),
      user_id: ['some-user-id'],  // Replace with ObjectId in a real scenario
      post_id: ['some-post-id'],  // Replace with ObjectId in a real scenario
    };

    // Insert document without specifying _id (MongoDB will auto-generate it)
    await comments.insertOne(mockComment);

    const insertedComment = await comments.findOne({ comment_id: 'some-uuid' });
    expect(insertedComment).toMatchObject(mockComment);  // Compare fields except _id
  });
});
